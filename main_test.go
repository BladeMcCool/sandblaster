package main

import (
	"crypto"
	// "crypto/rand"
	"crypto/rsa"
	"errors"
	// "crypto/sha256"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"testing"
)

var pkeyStr = `-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAw67O/pSrc+RN9DVbWjfNx06oIV8p508Q84DaNOFp9cQvWG+E
HycRugWdg9+txszCxDFtJRKyWD/q/dyBs2MRlvteb5oOZGlBGihtnqLYFKKm8tOX
ucsRks5nUzfbYY8T/0ZlNmR6ssffYDNwYUhp1hlJJN7zgRfy2JUWUxNlp7d4aaPD
Q41AZ7smgzJnKnDNZB8lSytadylkaitgT3ZtI7SJLywEr9SvjHf5u2U7jsmYvz0T
zblbRdgvbGJ5bKUIqTHWsaqqzKZnm5+EQIzQ3XiDVFZln2u+YWvlJKKEhZ1voLLc
xfq1UgtOzRQVqfc3niOcg07bdvTlvSRU+xmRmwIDAQABAoIBAAHwFDqvLDd8lk0J
zjrJfK8xlzalY5vXy5ott3t4k/0MEU/14sAQOfu2nIW2zFjApFkfCC6qzbtT/ra+
3UXygDUXjirawrO52xwwNE2y3SLvLWoQMFt1qFnk018emXyQ1yjbAJuWSSTGF+8y
8zTza6DkJTZJQu4PV6dPaqYt9f7ALPEEciV/UoNb0BRYref7AdW79eM9BEqU/CMc
zhnHfA7zoISzvilVyZM6E0pkDd1FPqoRHDJ3zwJJit5HsaQTftmEOtNIgxIKHolc
HhiZQHwadDEX+vporkF2lCrn29TaYdIQQc2mB38mwwxUdnS+zqDYmaeZTtkFMHMo
0RaUkiECgYEA5HtHJSHGvYzRc8mAopnK2OYCjiNJSYpAaPDG6wk1uYyttxRSX1a7
fA/Mov6CTtVHNGPp7n7jqMo2WsSnjEKp0JUMXfm5jN/Z1RKB3blofqRJqmbKMzIW
Ehax4bAaFvwGl2WBJWZdPJj4+y3L9zpdTT1VieVlnkZuZ5P0TRONzlECgYEA20BB
VfgsRqExtdF07CT/LJthxNV656qIc75xyQ/7V4KjoKsd8KhnVpZyVV7e4ShOvpBF
PFpFiKISMD0BkI7oUIewlCC7ueksl3l5YNJYWyfZ7G9BOPqu86GSUcKfzeXOl117
Ixit+zcxzd3MWFalmgvoTbTN2Hl8DTW0eCq8yisCgYADK0aQWEiWZnadQYU8PB/Z
JE+SwyCIGZfNHNHVfro1CaN7L5f45I4TKXDwLdGG4GRtcJlVCoOD2tIoLiQYyO/s
CbUzNHyDXLN7xhbxCVpOr16qM2TIkwBFXfU3qSajfPlmbiz9ZM8UQRbq/PagRjn3
EUu3buwa5uUvIJk53HSSEQKBgBV25O6VrT/85/D04I190b18OMYcYDvt5g3uxxT4
C5M1pu9D0VqOIg/ICslw0EEawRrG5QBTlhsaQs2WK2ELnJLFtfPKgJZizYrGyatA
7IWAEUWkXq5FXHtdhgWbGCoAJYmMDVISSHYfoTCWVjsPwIakQ8nXuY9H1W01pMVe
6byhAoGAV0Glg8MtslJOKvO1tQmqygxctEs0H82fnYm62lmpg44SbnR5xQUHYQqT
FTqa1DmTwmgExEGFhsg7K93u/ae0jK77otkRtMuwP9cnqQaT3mQpoY7Qc7oWrqTn
Uu/OM3rHq2/eNgGQbKSY8nEOgK/aSQrPTjoYybdzgumdxanIxBM=
-----END RSA PRIVATE KEY-----`

var ownerName = "Bojack"
var ownerNameSig = []byte{0x7, 0x4a, 0x3a, 0xf4, 0x29, 0x5c, 0x2e, 0x27, 0x7e, 0xc, 0x3b, 0xe4, 0x6b, 0xdf, 0x2a, 0xce, 0x72, 0xec, 0x46, 0x44, 0x67, 0x60, 0xaf, 0xaa, 0x92, 0xcb, 0x66, 0x72, 0xec, 0x31, 0xf6, 0x93, 0xac, 0x8b, 0x84, 0x8e, 0x3f, 0x93, 0x97, 0x3b, 0x17, 0xc, 0x9, 0xe8, 0xb, 0x88, 0x9f, 0x8f, 0x30, 0x2b, 0xcc, 0x21, 0xc3, 0xb5, 0xa2, 0xb2, 0xc6, 0x43, 0x7f, 0x17, 0x85, 0xa0, 0x57, 0xff, 0xc6, 0x4e, 0xaf, 0x58, 0x3c, 0x99, 0x32, 0x14, 0x32, 0x57, 0x5a, 0x9a, 0x2a, 0x54, 0x83, 0xb0, 0x17, 0x53, 0x29, 0xba, 0xd, 0xda, 0x5, 0xe0, 0xc7, 0x1c, 0xee, 0x40, 0x4, 0x53, 0x14, 0xcf, 0xe1, 0x46, 0xbb, 0x7f, 0x51, 0x1e, 0x39, 0xa5, 0xee, 0x1a, 0xe8, 0xe4, 0x5a, 0xbb, 0xaa, 0x8a, 0x75, 0xca, 0xed, 0xb4, 0xf0, 0xdd, 0xa0, 0x1a, 0xfb, 0x26, 0x74, 0xac, 0x23, 0xf4, 0x31, 0x2, 0x35, 0xb2, 0x43, 0xe, 0xdc, 0x26, 0x57, 0x9, 0x57, 0x30, 0xd7, 0x9a, 0x4, 0x3b, 0x4d, 0x19, 0x76, 0x4e, 0x4a, 0xb3, 0x92, 0x54, 0xda, 0x94, 0x5b, 0xbb, 0xd1, 0x8a, 0xde, 0x50, 0x7c, 0xe2, 0x85, 0x6e, 0x78, 0x8c, 0x3c, 0x4b, 0xc1, 0xbb, 0x8, 0xb8, 0x51, 0x4c, 0x3a, 0x2, 0xb4, 0x76, 0xc7, 0xc1, 0x87, 0xde, 0x1, 0xc5, 0x36, 0x79, 0x1c, 0x4c, 0xbc, 0xbc, 0x91, 0x51, 0x9e, 0x51, 0xf3, 0x8d, 0x18, 0x9a, 0x2e, 0x31, 0x1a, 0xff, 0x5c, 0x36, 0xe1, 0x1d, 0x6a, 0xc9, 0xb6, 0x17, 0x6a, 0xe2, 0xf4, 0x9, 0xd0, 0x2e, 0xf1, 0x9c, 0xff, 0x3b, 0xaa, 0x78, 0x6f, 0x26, 0xd6, 0xc, 0x96, 0x6d, 0x72, 0x63, 0x1c, 0x50, 0x99, 0x96, 0xc5, 0xa8, 0xe3, 0xf8, 0xfe, 0x78, 0x60, 0x15, 0x9b, 0xaf, 0x86, 0x28, 0xcc, 0x75, 0xe8, 0x25, 0x7b, 0x71, 0x1b, 0xf8, 0x38, 0xa4, 0x30, 0xfd}
var worldSeed = "Amazeballs"
var worldSig = []byte{0x1c, 0xb9, 0x89, 0x4c, 0x3f, 0xce, 0xd2, 0x6e, 0x4a, 0xaa, 0xf7, 0x15, 0x50, 0x76, 0x4, 0x20, 0x36, 0x7f, 0x64, 0x59, 0xa0, 0xc7, 0x38, 0x4, 0x77, 0x9e, 0x6f, 0xe8, 0x58, 0x23, 0xfa, 0x1c, 0x5b, 0x67, 0xf, 0xe8, 0x7, 0x56, 0x96, 0x2f, 0xe2, 0xba, 0xa0, 0xa2, 0x7f, 0x82, 0xa2, 0xa, 0xda, 0xf9, 0xb1, 0x8f, 0xca, 0xbc, 0x43, 0x21, 0x12, 0x2a, 0x30, 0x3, 0x43, 0x45, 0xbb, 0x98, 0x1f, 0x30, 0x6e, 0xc8, 0x44, 0x91, 0xdf, 0xe3, 0x60, 0xdf, 0x89, 0xef, 0xf7, 0x91, 0x8d, 0x86, 0xdf, 0x14, 0x85, 0xf4, 0xd7, 0xed, 0x64, 0xb9, 0xa7, 0xd, 0xd4, 0x22, 0x56, 0xe9, 0xda, 0x3, 0x21, 0x28, 0x23, 0x34, 0x47, 0x2c, 0x2d, 0x95, 0xc8, 0xfb, 0xef, 0xc7, 0xa1, 0xc6, 0x11, 0x7, 0x9, 0xc5, 0xaa, 0x1d, 0x86, 0xe6, 0x64, 0xf7, 0xa8, 0x19, 0x7, 0x1b, 0x2e, 0xb6, 0x5f, 0x81, 0x28, 0x24, 0xf3, 0x7b, 0xc4, 0x9f, 0xf2, 0xa2, 0xde, 0x99, 0xb, 0xeb, 0xd1, 0xbf, 0xc, 0x36, 0x1b, 0x8e, 0x3f, 0x90, 0x26, 0x5b, 0x51, 0x7f, 0xe1, 0x4, 0x5e, 0x7e, 0xd4, 0x2d, 0xe4, 0xc2, 0x60, 0x78, 0x19, 0x8a, 0x80, 0x5e, 0x37, 0x51, 0xc, 0x26, 0xbf, 0x4, 0x72, 0xc1, 0x89, 0x66, 0xed, 0xcd, 0xb0, 0x43, 0x9, 0x7a, 0x10, 0x19, 0xe6, 0xf7, 0xce, 0x86, 0x9a, 0xa6, 0x9e, 0xce, 0x20, 0x6c, 0x88, 0x98, 0x16, 0xb4, 0x19, 0x28, 0x64, 0x15, 0x59, 0xe3, 0x1c, 0x49, 0xa0, 0x6d, 0x31, 0x41, 0x33, 0x8e, 0xf9, 0x4f, 0x87, 0x1d, 0xa8, 0xe4, 0xb, 0x3b, 0xbe, 0x6a, 0x38, 0xb8, 0x32, 0x2d, 0x72, 0x82, 0x4b, 0x56, 0x22, 0xeb, 0xd6, 0x6e, 0x14, 0xed, 0x2c, 0xb7, 0xbc, 0xd9, 0x6a, 0x0, 0xe2, 0x2c, 0x35, 0x50, 0x5d, 0x3e, 0xce, 0x45, 0xf7, 0x78, 0x9d, 0x6f, 0x4a, 0x98}

// var pkeyStr = "hi"

func checkTesta(e error, t *testing.T) {
	if e != nil {
		t.Errorf(e.Error())
	}
}

var ownerPlayer *player

func getOwner() (*player, error) {
	if ownerPlayer != nil {
		return ownerPlayer, nil
	}

	block, _ := pem.Decode([]byte(pkeyStr))
	if block == nil {
		return nil, errors.New("bad nil result from pem.Decode")
		// t.Fatalf("bad nil result from pem.Decode")
	}
	myownPrivateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	myownPublicKey := &myownPrivateKey.PublicKey
	fmt.Printf("!! Public key %x %x\n", myownPublicKey.N, myownPublicKey.E)
	if err != nil {
		return nil, err
	}
	ownerPlayer = &player{
		name:     ownerName,
		x:        0,
		y:        0,
		pubkey:   myownPublicKey,
		privkey:  myownPrivateKey,
		invitees: []*player{},
		guild:    &guild{},
		state:    0,   //(0=absorbing,1=damaging,2=healing)
		health:   100, //max 100
	}
	ownerPlayer.sig = ownerNameSig
	return ownerPlayer, nil
}

// func getWorld(owner *player) (*worldstate, error) {
func getWorld() (*worldstate, error) {
	// myHashAlgo := crypto.SHA256
	// worldSeedHasher := myHashAlgo.New()
	// worldSeedHasher.Write([]byte(worldSeed))
	// worldSeedHash := worldSeedHasher.Sum(nil)
	// opts := &rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthAuto}
	// sig, err := rsa.SignPSS(rand.Reader, owner.privkey, myHashAlgo, worldSeedHash, opts)
	owner, _ := getOwner()
	return &worldstate{
		owner: owner,
		seed:  []byte(worldSeed),
		// sig:     sig,
		sig:     worldSig,
		players: []*player{owner},
	}, nil

}

func TestEstablishOwner(t *testing.T) {

	owner, err := getOwner()
	checkTesta(err, t)

	// block, _ := pem.Decode([]byte(pkeyStr))
	// if block == nil {
	// 	t.Fatalf("bad nil result from pem.Decode")
	// }
	// myownPrivateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	// myownPublicKey := &myownPrivateKey.PublicKey
	// fmt.Printf("!! Public key %x %x\n", myownPublicKey.N, myownPublicKey.E)
	// checkTesta(err, t)
	// ownerPlayer = &player{
	// 	name:     ownerName,
	// 	x:        0,
	// 	y:        0,
	// 	pubkey:   myownPublicKey,
	// 	privkey:  myownPrivateKey,
	// 	invitees: []*player{},
	// 	guild:    &guild{},
	// 	state:    0,   //(0=absorbing,1=damaging,2=healing)
	// 	health:   100, //max 100
	// }
	myHashAlgo := crypto.SHA256
	ownerNameHasher := myHashAlgo.New()
	ownerNameHasher.Write([]byte(ownerName))
	ownerNameHash := ownerNameHasher.Sum(nil)
	opts := &rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthAuto}

	// sig, err := rsa.SignPSS(rand.Reader, myownPrivateKey, myHashAlgo, ownerNameHash, opts)
	// checkTesta(err, t)
	fmt.Printf("Owner Signed: %x\n", owner.sig)
	// ownerPlayer.sig = sig
	// ownerPlayer.sig = ownerNameSig

	err = rsa.VerifyPSS(owner.pubkey, myHashAlgo, ownerNameHash, ownerPlayer.sig, opts)
	checkTesta(err, t)

	// myownPrivateKey.Sign(rand, msg, opts)
}

func TestCreateWorld(t *testing.T) {
	// owner, _ := getOwner()
	world, err := getWorld()

	// worldSeed := "Amazeballs"
	myHashAlgo := crypto.SHA256
	worldSeedHasher := myHashAlgo.New()
	worldSeedHasher.Write([]byte(worldSeed))
	worldSeedHash := worldSeedHasher.Sum(nil)
	opts := &rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthAuto}

	// sig, err := rsa.SignPSS(rand.Reader, owner.privkey, myHashAlgo, worldSeedHash, opts)
	err = rsa.VerifyPSS(world.owner.pubkey, myHashAlgo, worldSeedHash, worldSig, opts)
	checkTesta(err, t)

	// fmt.Printf("World seed hash: %x\n", worldSeedHash)
	// fmt.Printf("World seed sig: %x\n", sig)
	// fmt.Printf("World seed sig bytes: %#v\n", sig)
}
